# yaml-language-server: $schema=https://aka.ms/configuration-dsc-schema/0.2

##########################################################################################################
# This configuration will install the tools necessary for React Native for Windows development           #
# Reference: https://microsoft.github.io/react-native-windows/docs/rnw-dependencies                      #
#                                                                                                        #
# Note: If an existing version of Node.js is installed on the machine outside of NVM, you will be        #
#       prompted to either allow NVM to manage that installation or remove it.                           #
##########################################################################################################

properties:
  configurationVersion: 0.2.0
  resources:
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Git
      directives:
        description: Install Git
        allowPrerelease: true
      settings:
        id: Git.Git
        source: winget
    - resource: PSDscResources/Environment
      id: GitPath
      dependsOn:
        - Git
      directives:
        description: Add Git bin to PATH to enable bash and sh script execution
      settings:
        Name: PATH
        Value: C:\Program Files\Git\bin
        Ensure: Present
        Path: true
        Target: 
          - Process
          - Machine
    - resource: Microsoft.Windows.Developer/DeveloperMode
      id: DeveloperMode
      directives:
        description: Enable Developer Mode
        allowPrerelease: true
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: NVM
      directives:
        description: Install NVM for Windows
        allowPrerelease: true
      settings:
        id: CoreyButler.NVMforWindows
        source: winget
        version: "1.1.11" # We can remove this version pin once this issue is resolved: https://github.com/coreybutler/nvm-windows/issues/1068
    - resource: PSDscResources/Script
      id: NVMDefault
      dependsOn:
        - NVM
      directives:
        description: Set NVM for Windows default version to lts
      settings:
        TestScript: try { $nodeVersion = node -v; $true } catch { $false }
        SetScript: "& nvm install lts; & nvm use lts"
        GetScript: return @{ Result = node -v }
    - resource: PSDscResources/Script
      id: Yarn
      dependsOn:
        - NVMDefault
      directives:
        description: Install yarn 1
      settings:
        TestScript: try { $yarnVersion = yarn -v; $true } catch { $false }
        SetScript: corepack enable
        GetScript: return @{ Result = yarn -v }
    - resource: PSDscResources/Script
      id: NpmConfigShell
      dependsOn:
        - Git
        - NVM
        - NVMDefault
      directives:
        description: npm config set shell "C:\\Program Files\\Git\\bin\\bash.exe"
      settings:
        TestScript: try { if ((npm config get shell) -eq 'C:\Program Files\Git\bin\bash.exe') { $true } else { $false } } catch { $false }
        SetScript: npm config set shell "C:\\Program Files\\Git\\bin\\bash.exe"
        GetScript: return @{ Result = npm config get shell }
    - resource: PSDscResources/Script
      id: NpmConfigScriptShell
      dependsOn:
        - Git
        - NVM
        - NVMDefault
      directives:
        description: npm config set script-shell "C:\\Program Files\\Git\\bin\\bash.exe"
      settings:
        TestScript: return ((npm config get script-shell) -eq 'C:\Program Files\Git\bin\bash.exe')
        SetScript: npm config set script-shell "C:\\Program Files\\Git\\bin\\bash.exe"
        GetScript: return @{ Result = npm config get script-shell }
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: vsPackage
      directives:
        description: Install Visual Studio 2022 Community
        allowPrerelease: true
      settings:
        id: Microsoft.VisualStudio.2022.Community
        source: winget
    - resource: Microsoft.VisualStudio.DSC/VSComponents
      id: vsComponents
      dependsOn:
        - vsPackage
      directives:
        description: Install required VS workloads and components
        allowPrerelease: true
      settings:
        productId: Microsoft.VisualStudio.Product.Community
        channelId: VisualStudio.17.Release
        components:
          - Microsoft.VisualStudio.Component.VC.Tools.x86.x64
          - Microsoft.VisualStudio.ComponentGroup.UWP.Support
          - Microsoft.VisualStudio.ComponentGroup.NativeDesktop.Core
          - Microsoft.VisualStudio.Component.Windows10SDK.19041
          - Microsoft.VisualStudio.Workload.ManagedDesktop
          - Microsoft.VisualStudio.Workload.NativeDesktop
          - Microsoft.VisualStudio.Workload.Universal
          - Microsoft.VisualStudio.ComponentGroup.UWP.VC
        includeRecommended: false
    - resource: PSDscResources/Registry
      id: EnableLongPaths
      directives:
        description: Enable Long Paths
        allowPrerelease: true
      settings:
        Ensure: Present
        Key: HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem
        ValueName: LongPathsEnabled
        ValueType: Dword
        ValueData: 1
        Force: true
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: DotNet
      directives:
        description: Install .NET 6.0 SDK
        allowPrerelease: true
      settings:
        id: Microsoft.DotNet.SDK.6
        source: winget
